@rendermode InteractiveWebAssembly

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (IsConnected)
{
    <!-- Floating Chat Room Container -->
    <div class="position-fixed bottom-0 end-0 m-3 shadow-lg" style="width: 400px; max-height: 70vh; z-index: 1000;">
        <!-- Chat Room Header -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Ask Woody</h5>
                <button class="btn-close" type="button" aria-label="Close"></button>
            </div>

            <!-- Chat Messages Section -->
            <div class="card-body overflow-auto" style="height: 300px;">
                <ul class="list-group list-group-flush">
                    @foreach (var msg in messages)
                    {
                        <li class="list-group-item">@msg</li>
                    }
                </ul>
            </div>

            <!-- Chat Input Section -->
            <div class="card-footer">
                <div class="input-group">
                    <input type="text" class="form-control" @bind="message" placeholder="Type a message..." />
                    <button class="btn btn-primary" @onclick="Send">Send</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Loading Spinner -->
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
        </div>
    </div>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public HubConnection? hubConnection;
    private List<string> messages = new();
    private string user = string.Empty;
    private string message = string.Empty;

    private DotNetObjectReference<Chat>? objRef;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            user = state?.User?.Claims?.FirstOrDefault(c => c.Type == "name")?.Value ?? string.Empty;
        }

        objRef = DotNetObjectReference.Create(this);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/WoodysWildGuessAssemblyScripts.js");
            
            if (_jsModule is not null)
            {
                await _jsModule.InvokeVoidAsync("collapseNavbar");
                await _jsModule.InvokeVoidAsync("OnEnterKeyPressed", objRef);
            }

            await Connect();
        }
    }

    [JSInvokable]
    public async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            string broacastMessage = string.Empty;

            if (string.IsNullOrEmpty(username))
            {
                broacastMessage = $"{message}";
            }
            else
            {
                broacastMessage = $"{username}: {message}";
            }

            messages.Add(broacastMessage);
            StateHasChanged();
        });

        if (hubConnection.State is not HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();
        }
    }

    public ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            hubConnection.StopAsync();
            hubConnection.DisposeAsync();
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task Send()
    {
        if (hubConnection is null)
        {
            return;
        }  

        await hubConnection.SendAsync("SendMessage", user, message);
        message = string.Empty;
        StateHasChanged();
    }
}
